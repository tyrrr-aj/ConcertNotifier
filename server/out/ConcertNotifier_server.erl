-module('ConcertNotifier_server').

%% this file was generated by grpc

-export([decoder/0,
         'TrackConcerts'/3]).

-type 'Genre'() ::
    'ALL' |
    'SYMPHONIC_METAL' |
    'MELODIC_DEATH_METAL' |
    'POWER_METAL' |
    'THRASH_METAL' |
    'ACAPELLA_METAL' |
    'PROG_METAL'.

-type 'SubscriptionRequest'() ::
    #{'City' => [string()],
      'Band' => [string()],
      'Genre' => ['Genre'() | integer()]}.

-type 'ConcertEvent'() ::
    #{'City' => string(),
      'Band' => string()}.

-spec decoder() -> module().
%% The module (generated by gpb) used to encode and decode protobuf
%% messages.
decoder() -> 'ConcertNotifier'.

%% RPCs for service 'ConcertNotifier'

-spec 'TrackConcerts'(Message::'SubscriptionRequest'(), Stream::grpc:stream(), State::any()) ->
    {['ConcertEvent'()], grpc:stream()} | grpc:error_response().
%% This is a server-to-client streaming RPC
'TrackConcerts'(Message, Stream, _State) ->
    io:format("Concert stream requested~n", []),
    concert_generator:subscribe(),
    EndStream = send_notifications(Message, Stream),
    {[construct_event("Epica", "KrakÃ³w")], EndStream}.

send_notifications(#{'City' := Cities, 'Band' := Bands, 'Genre' := Genres} = Preferences, Stream) ->
    receive
        {{Band, Genre}, City} -> 
            case (lists:member(Band, Bands) or (lists:member(Genre, Genres)) and lists:member(City, Cities)) of
                true -> 
                    io:format("Sending concert ~tp~n", [construct_event(Band, City)]),
                    StreamContinuation = grpc:send(Stream, construct_event(Band, City)),
                    send_notifications(Preferences, StreamContinuation);
                false -> send_notifications(Preferences, Stream)
            end
    end.

construct_event(Band, City) ->
    #{'City' => City, 'Band' => Band}.

