%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.2
-module('ConcertNotifier').

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_Genre/1, enum_value_by_symbol_Genre/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'Genre'() :: 'ALL' | 'SYMPHONIC_METAL' | 'MELODIC_DEATH_METAL' | 'POWER_METAL' | 'THRASH_METAL' | 'ACAPELLA_METAL' | 'PROG_METAL'.
-export_type(['Genre'/0]).

%% message types
-type 'SubscriptionRequest'() ::
      #{'City'                  => [iodata()],      % = 1
        'Band'                  => [iodata()],      % = 2
        'Genre'                 => ['ALL' | 'SYMPHONIC_METAL' | 'MELODIC_DEATH_METAL' | 'POWER_METAL' | 'THRASH_METAL' | 'ACAPELLA_METAL' | 'PROG_METAL' | integer()] % = 3, enum Genre
       }.

-type 'ConcertEvent'() ::
      #{'City'                  => iodata(),        % = 1
        'Band'                  => iodata()         % = 2
       }.

-export_type(['SubscriptionRequest'/0, 'ConcertEvent'/0]).

-spec encode_msg('SubscriptionRequest'() | 'ConcertEvent'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg('SubscriptionRequest'() | 'ConcertEvent'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'SubscriptionRequest' ->
            encode_msg_SubscriptionRequest(id(Msg, TrUserData),
                                           TrUserData);
        'ConcertEvent' ->
            encode_msg_ConcertEvent(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_SubscriptionRequest(Msg, TrUserData) ->
    encode_msg_SubscriptionRequest(Msg, <<>>, TrUserData).


encode_msg_SubscriptionRequest(#{} = M, Bin,
                               TrUserData) ->
    B1 = case M of
             #{'City' := F1} ->
                 TrF1 = id(F1, TrUserData),
                 if TrF1 == [] -> Bin;
                    true ->
                        e_field_SubscriptionRequest_City(TrF1, Bin, TrUserData)
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{'Band' := F2} ->
                 TrF2 = id(F2, TrUserData),
                 if TrF2 == [] -> B1;
                    true ->
                        e_field_SubscriptionRequest_Band(TrF2, B1, TrUserData)
                 end;
             _ -> B1
         end,
    case M of
        #{'Genre' := F3} ->
            TrF3 = id(F3, TrUserData),
            if TrF3 == [] -> B2;
               true ->
                   e_field_SubscriptionRequest_Genre(TrF3, B2, TrUserData)
            end;
        _ -> B2
    end.

encode_msg_ConcertEvent(Msg, TrUserData) ->
    encode_msg_ConcertEvent(Msg, <<>>, TrUserData).


encode_msg_ConcertEvent(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{'City' := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{'Band' := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false ->
                        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

e_field_SubscriptionRequest_City([Elem | Rest], Bin,
                                 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData),
                         Bin2,
                         TrUserData),
    e_field_SubscriptionRequest_City(Rest,
                                     Bin3,
                                     TrUserData);
e_field_SubscriptionRequest_City([], Bin,
                                 _TrUserData) ->
    Bin.

e_field_SubscriptionRequest_Band([Elem | Rest], Bin,
                                 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData),
                         Bin2,
                         TrUserData),
    e_field_SubscriptionRequest_Band(Rest,
                                     Bin3,
                                     TrUserData);
e_field_SubscriptionRequest_Band([], Bin,
                                 _TrUserData) ->
    Bin.

e_field_SubscriptionRequest_Genre(Elems, Bin,
                                  TrUserData)
    when Elems =/= [] ->
    SubBin = e_pfield_SubscriptionRequest_Genre(Elems,
                                                <<>>,
                                                TrUserData),
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_SubscriptionRequest_Genre([], Bin,
                                  _TrUserData) ->
    Bin.

e_pfield_SubscriptionRequest_Genre([Value | Rest], Bin,
                                   TrUserData) ->
    Bin2 = e_enum_Genre(id(Value, TrUserData),
                        Bin,
                        TrUserData),
    e_pfield_SubscriptionRequest_Genre(Rest,
                                       Bin2,
                                       TrUserData);
e_pfield_SubscriptionRequest_Genre([], Bin,
                                   _TrUserData) ->
    Bin.

e_enum_Genre('ALL', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_Genre('SYMPHONIC_METAL', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_Genre('MELODIC_DEATH_METAL', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_Genre('POWER_METAL', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
e_enum_Genre('THRASH_METAL', Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
e_enum_Genre('ACAPELLA_METAL', Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
e_enum_Genre('PROG_METAL', Bin, _TrUserData) ->
    <<Bin/binary, 6>>;
e_enum_Genre(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('SubscriptionRequest', Bin,
                  TrUserData) ->
    id(decode_msg_SubscriptionRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ConcertEvent', Bin, TrUserData) ->
    id(decode_msg_ConcertEvent(Bin, TrUserData),
       TrUserData).



decode_msg_SubscriptionRequest(Bin, TrUserData) ->
    dfp_read_field_def_SubscriptionRequest(Bin,
                                           0,
                                           0,
                                           id([], TrUserData),
                                           id([], TrUserData),
                                           id([], TrUserData),
                                           TrUserData).

dfp_read_field_def_SubscriptionRequest(<<10,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_SubscriptionRequest_City(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData);
dfp_read_field_def_SubscriptionRequest(<<18,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_SubscriptionRequest_Band(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData);
dfp_read_field_def_SubscriptionRequest(<<26,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_pfield_SubscriptionRequest_Genre(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData);
dfp_read_field_def_SubscriptionRequest(<<24,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_SubscriptionRequest_Genre(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
dfp_read_field_def_SubscriptionRequest(<<>>, 0, 0, R1,
                                       R2, R3, TrUserData) ->
    #{'City' => lists_reverse(R1, TrUserData),
      'Band' => lists_reverse(R2, TrUserData),
      'Genre' => lists_reverse(R3, TrUserData)};
dfp_read_field_def_SubscriptionRequest(Other, Z1, Z2,
                                       F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_SubscriptionRequest(Other,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          TrUserData).

dg_read_field_def_SubscriptionRequest(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SubscriptionRequest(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          TrUserData);
dg_read_field_def_SubscriptionRequest(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_SubscriptionRequest_City(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData);
        18 ->
            d_field_SubscriptionRequest_Band(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData);
        26 ->
            d_pfield_SubscriptionRequest_Genre(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
        24 ->
            d_field_SubscriptionRequest_Genre(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_SubscriptionRequest(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    TrUserData);
                1 ->
                    skip_64_SubscriptionRequest(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                TrUserData);
                2 ->
                    skip_length_delimited_SubscriptionRequest(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData);
                3 ->
                    skip_group_SubscriptionRequest(Rest,
                                                   Key bsr 3,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   TrUserData);
                5 ->
                    skip_32_SubscriptionRequest(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                TrUserData)
            end
    end;
dg_read_field_def_SubscriptionRequest(<<>>, 0, 0, R1,
                                      R2, R3, TrUserData) ->
    #{'City' => lists_reverse(R1, TrUserData),
      'Band' => lists_reverse(R2, TrUserData),
      'Genre' => lists_reverse(R3, TrUserData)}.

d_field_SubscriptionRequest_City(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_SubscriptionRequest_City(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData);
d_field_SubscriptionRequest_City(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_SubscriptionRequest(RestF,
                                           0,
                                           0,
                                           cons(NewFValue, Prev, TrUserData),
                                           F@_2,
                                           F@_3,
                                           TrUserData).

d_field_SubscriptionRequest_Band(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_SubscriptionRequest_Band(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData);
d_field_SubscriptionRequest_Band(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_SubscriptionRequest(RestF,
                                           0,
                                           0,
                                           F@_1,
                                           cons(NewFValue, Prev, TrUserData),
                                           F@_3,
                                           TrUserData).

d_field_SubscriptionRequest_Genre(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_SubscriptionRequest_Genre(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
d_field_SubscriptionRequest_Genre(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_Genre(begin
                                              <<Res:32/signed-native>> = <<(X
                                                                                bsl
                                                                                N
                                                                                +
                                                                                Acc):32/unsigned-native>>,
                                              id(Res, TrUserData)
                                          end),
                             TrUserData),
                          Rest},
    dfp_read_field_def_SubscriptionRequest(RestF,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           cons(NewFValue, Prev, TrUserData),
                                           TrUserData).

d_pfield_SubscriptionRequest_Genre(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_pfield_SubscriptionRequest_Genre(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData);
d_pfield_SubscriptionRequest_Genre(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
        d_packed_field_SubscriptionRequest_Genre(PackedBytes,
                                                 0,
                                                 0,
                                                 E,
                                                 TrUserData),
    dfp_read_field_def_SubscriptionRequest(Rest2,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           NewSeq,
                                           TrUserData).

d_packed_field_SubscriptionRequest_Genre(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_SubscriptionRequest_Genre(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             AccSeq,
                                             TrUserData);
d_packed_field_SubscriptionRequest_Genre(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_Genre(begin
                                              <<Res:32/signed-native>> = <<(X
                                                                                bsl
                                                                                N
                                                                                +
                                                                                Acc):32/unsigned-native>>,
                                              id(Res, TrUserData)
                                          end),
                             TrUserData),
                          Rest},
    d_packed_field_SubscriptionRequest_Genre(RestF,
                                             0,
                                             0,
                                             [NewFValue | AccSeq],
                                             TrUserData);
d_packed_field_SubscriptionRequest_Genre(<<>>, 0, 0,
                                         AccSeq, _) ->
    AccSeq.

skip_varint_SubscriptionRequest(<<1:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_SubscriptionRequest(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData);
skip_varint_SubscriptionRequest(<<0:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_SubscriptionRequest(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData).

skip_length_delimited_SubscriptionRequest(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_SubscriptionRequest(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData);
skip_length_delimited_SubscriptionRequest(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, F@_3,
                                          TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SubscriptionRequest(Rest2,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData).

skip_group_SubscriptionRequest(Bin, FNum, Z2, F@_1,
                               F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SubscriptionRequest(Rest,
                                           0,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData).

skip_32_SubscriptionRequest(<<_:32, Rest/binary>>, Z1,
                            Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_SubscriptionRequest(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData).

skip_64_SubscriptionRequest(<<_:64, Rest/binary>>, Z1,
                            Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_SubscriptionRequest(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData).

decode_msg_ConcertEvent(Bin, TrUserData) ->
    dfp_read_field_def_ConcertEvent(Bin,
                                    0,
                                    0,
                                    id([], TrUserData),
                                    id([], TrUserData),
                                    TrUserData).

dfp_read_field_def_ConcertEvent(<<10, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, TrUserData) ->
    d_field_ConcertEvent_City(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData);
dfp_read_field_def_ConcertEvent(<<18, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, TrUserData) ->
    d_field_ConcertEvent_Band(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData);
dfp_read_field_def_ConcertEvent(<<>>, 0, 0, F@_1, F@_2,
                                _) ->
    #{'City' => F@_1, 'Band' => F@_2};
dfp_read_field_def_ConcertEvent(Other, Z1, Z2, F@_1,
                                F@_2, TrUserData) ->
    dg_read_field_def_ConcertEvent(Other,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData).

dg_read_field_def_ConcertEvent(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ConcertEvent(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
dg_read_field_def_ConcertEvent(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_ConcertEvent_City(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
        18 ->
            d_field_ConcertEvent_Band(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_ConcertEvent(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
                1 ->
                    skip_64_ConcertEvent(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
                2 ->
                    skip_length_delimited_ConcertEvent(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
                3 ->
                    skip_group_ConcertEvent(Rest,
                                            Key bsr 3,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
                5 ->
                    skip_32_ConcertEvent(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_ConcertEvent(<<>>, 0, 0, F@_1, F@_2,
                               _) ->
    #{'City' => F@_1, 'Band' => F@_2}.

d_field_ConcertEvent_City(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ConcertEvent_City(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              TrUserData);
d_field_ConcertEvent_City(<<0:1, X:7, Rest/binary>>, N,
                          Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_ConcertEvent(RestF,
                                    0,
                                    0,
                                    NewFValue,
                                    F@_2,
                                    TrUserData).

d_field_ConcertEvent_Band(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ConcertEvent_Band(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              TrUserData);
d_field_ConcertEvent_Band(<<0:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_ConcertEvent(RestF,
                                    0,
                                    0,
                                    F@_1,
                                    NewFValue,
                                    TrUserData).

skip_varint_ConcertEvent(<<1:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ConcertEvent(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             TrUserData);
skip_varint_ConcertEvent(<<0:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ConcertEvent(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_length_delimited_ConcertEvent(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ConcertEvent(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
skip_length_delimited_ConcertEvent(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ConcertEvent(Rest2,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_group_ConcertEvent(Bin, FNum, Z2, F@_1, F@_2,
                        TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ConcertEvent(Rest,
                                    0,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_32_ConcertEvent(<<_:32, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ConcertEvent(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_64_ConcertEvent(<<_:64, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ConcertEvent(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

d_enum_Genre(0) -> 'ALL';
d_enum_Genre(1) -> 'SYMPHONIC_METAL';
d_enum_Genre(2) -> 'MELODIC_DEATH_METAL';
d_enum_Genre(3) -> 'POWER_METAL';
d_enum_Genre(4) -> 'THRASH_METAL';
d_enum_Genre(5) -> 'ACAPELLA_METAL';
d_enum_Genre(6) -> 'PROG_METAL';
d_enum_Genre(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'SubscriptionRequest' ->
            merge_msg_SubscriptionRequest(Prev, New, TrUserData);
        'ConcertEvent' ->
            merge_msg_ConcertEvent(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_SubscriptionRequest/3}).
merge_msg_SubscriptionRequest(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{'City' := PFCity}, #{'City' := NFCity}} ->
                 S1#{'City' => 'erlang_++'(PFCity, NFCity, TrUserData)};
             {_, #{'City' := NFCity}} -> S1#{'City' => NFCity};
             {#{'City' := PFCity}, _} -> S1#{'City' => PFCity};
             {_, _} -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {#{'Band' := PFBand}, #{'Band' := NFBand}} ->
                 S2#{'Band' => 'erlang_++'(PFBand, NFBand, TrUserData)};
             {_, #{'Band' := NFBand}} -> S2#{'Band' => NFBand};
             {#{'Band' := PFBand}, _} -> S2#{'Band' => PFBand};
             {_, _} -> S2
         end,
    case {PMsg, NMsg} of
        {#{'Genre' := PFGenre}, #{'Genre' := NFGenre}} ->
            S3#{'Genre' =>
                    'erlang_++'(PFGenre, NFGenre, TrUserData)};
        {_, #{'Genre' := NFGenre}} -> S3#{'Genre' => NFGenre};
        {#{'Genre' := PFGenre}, _} -> S3#{'Genre' => PFGenre};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_ConcertEvent/3}).
merge_msg_ConcertEvent(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{'City' := NFCity}} -> S1#{'City' => NFCity};
             {#{'City' := PFCity}, _} -> S1#{'City' => PFCity};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{'Band' := NFBand}} -> S2#{'Band' => NFBand};
        {#{'Band' := PFBand}, _} -> S2#{'Band' => PFBand};
        _ -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'SubscriptionRequest' ->
            v_msg_SubscriptionRequest(Msg, [MsgName], TrUserData);
        'ConcertEvent' ->
            v_msg_ConcertEvent(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_SubscriptionRequest/3}).
-dialyzer({nowarn_function,v_msg_SubscriptionRequest/3}).
v_msg_SubscriptionRequest(#{} = M, Path, TrUserData) ->
    case M of
        #{'City' := F1} ->
            if is_list(F1) ->
                   _ = [v_type_string(Elem, ['City' | Path], TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, string},
                                 F1,
                                 ['City' | Path])
            end;
        _ -> ok
    end,
    case M of
        #{'Band' := F2} ->
            if is_list(F2) ->
                   _ = [v_type_string(Elem, ['Band' | Path], TrUserData)
                        || Elem <- F2],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, string},
                                 F2,
                                 ['Band' | Path])
            end;
        _ -> ok
    end,
    case M of
        #{'Genre' := F3} ->
            if is_list(F3) ->
                   _ = [v_enum_Genre(Elem, ['Genre' | Path], TrUserData)
                        || Elem <- F3],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {enum, 'Genre'}},
                                 F3,
                                 ['Genre' | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun ('City') -> ok;
                      ('Band') -> ok;
                      ('Genre') -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_SubscriptionRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   'SubscriptionRequest'},
                  M,
                  Path);
v_msg_SubscriptionRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SubscriptionRequest'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_ConcertEvent/3}).
-dialyzer({nowarn_function,v_msg_ConcertEvent/3}).
v_msg_ConcertEvent(#{} = M, Path, TrUserData) ->
    case M of
        #{'City' := F1} ->
            v_type_string(F1, ['City' | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{'Band' := F2} ->
            v_type_string(F2, ['Band' | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun ('City') -> ok;
                      ('Band') -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_ConcertEvent(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   'ConcertEvent'},
                  M,
                  Path);
v_msg_ConcertEvent(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ConcertEvent'}, X, Path).

-compile({nowarn_unused_function,v_enum_Genre/3}).
-dialyzer({nowarn_function,v_enum_Genre/3}).
v_enum_Genre('ALL', _Path, _TrUserData) -> ok;
v_enum_Genre('SYMPHONIC_METAL', _Path, _TrUserData) ->
    ok;
v_enum_Genre('MELODIC_DEATH_METAL', _Path,
             _TrUserData) ->
    ok;
v_enum_Genre('POWER_METAL', _Path, _TrUserData) -> ok;
v_enum_Genre('THRASH_METAL', _Path, _TrUserData) -> ok;
v_enum_Genre('ACAPELLA_METAL', _Path, _TrUserData) ->
    ok;
v_enum_Genre('PROG_METAL', _Path, _TrUserData) -> ok;
v_enum_Genre(V, Path, TrUserData) when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_Genre(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Genre'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
                  N,
                  Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} ->
            mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg ->
            mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
                  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
                                         lists:map(fun atom_to_list/1,
                                                   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'Genre'},
      [{'ALL', 0},
       {'SYMPHONIC_METAL', 1},
       {'MELODIC_DEATH_METAL', 2},
       {'POWER_METAL', 3},
       {'THRASH_METAL', 4},
       {'ACAPELLA_METAL', 5},
       {'PROG_METAL', 6}]},
     {{msg, 'SubscriptionRequest'},
      [#{name => 'City', fnum => 1, rnum => 2, type => string,
         occurrence => repeated, opts => []},
       #{name => 'Band', fnum => 2, rnum => 3, type => string,
         occurrence => repeated, opts => []},
       #{name => 'Genre', fnum => 3, rnum => 4,
         type => {enum, 'Genre'}, occurrence => repeated,
         opts => [packed]}]},
     {{msg, 'ConcertEvent'},
      [#{name => 'City', fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []},
       #{name => 'Band', fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []}]}].


get_msg_names() ->
    ['SubscriptionRequest', 'ConcertEvent'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['SubscriptionRequest', 'ConcertEvent'].


get_enum_names() -> ['Genre'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('SubscriptionRequest') ->
    [#{name => 'City', fnum => 1, rnum => 2, type => string,
       occurrence => repeated, opts => []},
     #{name => 'Band', fnum => 2, rnum => 3, type => string,
       occurrence => repeated, opts => []},
     #{name => 'Genre', fnum => 3, rnum => 4,
       type => {enum, 'Genre'}, occurrence => repeated,
       opts => [packed]}];
find_msg_def('ConcertEvent') ->
    [#{name => 'City', fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => 'Band', fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('Genre') ->
    [{'ALL', 0},
     {'SYMPHONIC_METAL', 1},
     {'MELODIC_DEATH_METAL', 2},
     {'POWER_METAL', 3},
     {'THRASH_METAL', 4},
     {'ACAPELLA_METAL', 5},
     {'PROG_METAL', 6}];
find_enum_def(_) -> error.


enum_symbol_by_value('Genre', Value) ->
    enum_symbol_by_value_Genre(Value).


enum_value_by_symbol('Genre', Sym) ->
    enum_value_by_symbol_Genre(Sym).


enum_symbol_by_value_Genre(0) -> 'ALL';
enum_symbol_by_value_Genre(1) -> 'SYMPHONIC_METAL';
enum_symbol_by_value_Genre(2) -> 'MELODIC_DEATH_METAL';
enum_symbol_by_value_Genre(3) -> 'POWER_METAL';
enum_symbol_by_value_Genre(4) -> 'THRASH_METAL';
enum_symbol_by_value_Genre(5) -> 'ACAPELLA_METAL';
enum_symbol_by_value_Genre(6) -> 'PROG_METAL'.


enum_value_by_symbol_Genre('ALL') -> 0;
enum_value_by_symbol_Genre('SYMPHONIC_METAL') -> 1;
enum_value_by_symbol_Genre('MELODIC_DEATH_METAL') -> 2;
enum_value_by_symbol_Genre('POWER_METAL') -> 3;
enum_value_by_symbol_Genre('THRASH_METAL') -> 4;
enum_value_by_symbol_Genre('ACAPELLA_METAL') -> 5;
enum_value_by_symbol_Genre('PROG_METAL') -> 6.


get_service_names() -> ['ConcertNotifier'].


get_service_def('ConcertNotifier') ->
    {{service, 'ConcertNotifier'},
     [#{name => 'TrackConcerts',
        input => 'SubscriptionRequest',
        output => 'ConcertEvent', input_stream => false,
        output_stream => true, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('ConcertNotifier') -> ['TrackConcerts'];
get_rpc_names(_) -> error.


find_rpc_def('ConcertNotifier', RpcName) ->
    find_rpc_def_ConcertNotifier(RpcName);
find_rpc_def(_, _) -> error.


find_rpc_def_ConcertNotifier('TrackConcerts') ->
    #{name => 'TrackConcerts',
      input => 'SubscriptionRequest',
      output => 'ConcertEvent', input_stream => false,
      output_stream => true, opts => []};
find_rpc_def_ConcertNotifier(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error ->
            erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"ConcertNotifier">>) -> 'ConcertNotifier';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('ConcertNotifier') -> <<"ConcertNotifier">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"ConcertNotifier">>, <<"TrackConcerts">>) ->
    {'ConcertNotifier', 'TrackConcerts'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('ConcertNotifier',
                               'TrackConcerts') ->
    {<<"ConcertNotifier">>, <<"TrackConcerts">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"SubscriptionRequest">>) -> 'SubscriptionRequest';
fqbin_to_msg_name(<<"ConcertEvent">>) -> 'ConcertEvent';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('SubscriptionRequest') -> <<"SubscriptionRequest">>;
msg_name_to_fqbin('ConcertEvent') -> <<"ConcertEvent">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"Genre">>) -> 'Genre';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('Genre') -> <<"Genre">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "ConcertNotifier.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["ConcertNotifier.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["ConcertNotifier"].


get_msg_containment("ConcertNotifier") ->
    ['ConcertEvent', 'SubscriptionRequest'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("ConcertNotifier") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("ConcertNotifier") ->
    ['ConcertNotifier'];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("ConcertNotifier") ->
    [{'ConcertNotifier', 'TrackConcerts'}];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("ConcertNotifier") -> ['Genre'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"SubscriptionRequest">>) ->
    "ConcertNotifier";
get_proto_by_msg_name_as_fqbin(<<"ConcertEvent">>) ->
    "ConcertNotifier";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"ConcertNotifier">>) ->
    "ConcertNotifier";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"Genre">>) ->
    "ConcertNotifier";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.11.2".

gpb_version_as_list() ->
    [4,11,2].
